#!/bin/bash
# Generated by cc-statusline (https://www.npmjs.com/package/@chongdashu/cc-statusline)
# Custom Claude Code statusline - Created: 2025-08-23T23:15:50.040Z
# Theme: detailed | Colors: true | Features: directory, git, model, session

input=$(cat)

# ---- color helpers (force colors for Claude Code) ----
use_color=1
[ -n "$NO_COLOR" ] && use_color=0

C() { if [ "$use_color" -eq 1 ]; then printf '\033[%sm' "$1"; fi; }
RST() { if [ "$use_color" -eq 1 ]; then printf '\033[0m'; fi; }

# ---- modern sleek colors ----
dir_color() { if [ "$use_color" -eq 1 ]; then printf '\033[0;38;5;117m'; fi; } # sky blue
model_color() { if [ "$use_color" -eq 1 ]; then printf '\033[0;38;5;147m'; fi; } # light purple
version_color() { if [ "$use_color" -eq 1 ]; then printf '\033[0;38;5;186m'; fi; } # soft yellow
cc_version_color() { if [ "$use_color" -eq 1 ]; then printf '\033[0;38;5;249m'; fi; } # light gray
style_color() { if [ "$use_color" -eq 1 ]; then printf '\033[0;38;5;245m'; fi; } # gray
pink_color() { if [ "$use_color" -eq 1 ]; then printf '\033[0;38;5;218m'; fi; } # pastel pink
rst() { if [ "$use_color" -eq 1 ]; then printf '\033[0m'; fi; }

# ---- time helpers ----
to_epoch() {
  ts="$1"
  if command -v gdate >/dev/null 2>&1; then gdate -d "$ts" +%s 2>/dev/null && return; fi
  date -u -j -f "%Y-%m-%dT%H:%M:%S%z" "${ts/Z/+0000}" +%s 2>/dev/null && return
  python3 - "$ts" <<'PY' 2>/dev/null
import sys, datetime
s=sys.argv[1].replace('Z','+00:00')
print(int(datetime.datetime.fromisoformat(s).timestamp()))
PY
}

fmt_time_hm() {
  epoch="$1"
  if date -r 0 +%s >/dev/null 2>&1; then date -r "$epoch" +"%H:%M"; else date -d "@$epoch" +"%H:%M"; fi
}

progress_bar() {
  pct="${1:-0}"; width="${2:-10}"
  [[ "$pct" =~ ^[0-9]+$ ]] || pct=0; ((pct<0))&&pct=0; ((pct>100))&&pct=100
  filled=$(( pct * width / 100 )); empty=$(( width - filled ))
  printf '['
  printf '%*s' "$filled" '' | tr ' ' '='
  printf '%*s' "$empty" '' | tr ' ' '-'
  printf ']'
}

# git utilities
num_or_zero() { v="$1"; [[ "$v" =~ ^[0-9]+$ ]] && echo "$v" || echo 0; }

# ---- basics ----
if command -v jq >/dev/null 2>&1; then
  current_dir=$(echo "$input" | jq -r '.workspace.current_dir // .cwd // "unknown"' 2>/dev/null | sed "s|^$HOME|~|g")
  model_name=$(echo "$input" | jq -r '.model.display_name // "Claude"' 2>/dev/null)
  model_version=$(echo "$input" | jq -r '.model.version // ""' 2>/dev/null)
  cc_version=$(echo "$input" | jq -r '.version // ""' 2>/dev/null)
  output_style=$(echo "$input" | jq -r '.output_style.name // ""' 2>/dev/null)
else
  current_dir="unknown"
  model_name="Claude"; model_version=""
  cc_version=""
  output_style=""
fi

# ---- git colors ----
git_color() { if [ "$use_color" -eq 1 ]; then printf '\033[0;38;5;150m'; fi; }  # soft green

# ---- git ----
git_branch=""
if git rev-parse --git-dir >/dev/null 2>&1; then
  git_branch=$(git branch --show-current 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)
fi

# ---- usage colors ----
usage_color() { if [ "$use_color" -eq 1 ]; then printf '\033[0;38;5;189m'; fi; }  # lavender
cost_color() { if [ "$use_color" -eq 1 ]; then printf '\033[0;38;5;222m'; fi; }   # light gold
burn_color() { if [ "$use_color" -eq 1 ]; then printf '\033[0;38;5;220m'; fi; }   # bright gold
session_color() {
  rem_pct=$(( 100 - session_pct ))
  if   (( rem_pct <= 10 )); then SCLR='0;38;5;210'  # light pink
  elif (( rem_pct <= 25 )); then SCLR='0;38;5;228'  # light yellow
  else                          SCLR='0;38;5;194'; fi  # light green
  if [ "$use_color" -eq 1 ]; then printf '\033[%sm' "$SCLR"; fi
}

# ---- ccusage integration ----
session_txt=""; session_pct=0; session_bar=""
cost_usd=""; cost_per_hour=""; tpm=""; tot_tokens=""

if command -v jq >/dev/null 2>&1; then
  blocks_output=$(npx ccusage@latest blocks --json 2>/dev/null || ccusage blocks --json 2>/dev/null)
  if [ -n "$blocks_output" ]; then
    active_block=$(echo "$blocks_output" | jq -c '.blocks[] | select(.isActive == true)' 2>/dev/null | head -n1)
    if [ -n "$active_block" ]; then

      # Session time calculation
      reset_time_str=$(echo "$active_block" | jq -r '.usageLimitResetTime // .endTime // empty')
      start_time_str=$(echo "$active_block" | jq -r '.startTime // empty')

      if [ -n "$reset_time_str" ] && [ -n "$start_time_str" ]; then
        start_sec=$(to_epoch "$start_time_str"); end_sec=$(to_epoch "$reset_time_str"); now_sec=$(date +%s)
        total=$(( end_sec - start_sec )); (( total<1 )) && total=1
        elapsed=$(( now_sec - start_sec )); (( elapsed<0 ))&&elapsed=0; (( elapsed>total ))&&elapsed=$total
        session_pct=$(( elapsed * 100 / total ))
        remaining=$(( end_sec - now_sec )); (( remaining<0 )) && remaining=0
        rh=$(( remaining / 3600 )); rm=$(( (remaining % 3600) / 60 ))
        end_hm=$(fmt_time_hm "$end_sec")
        # Format reset time to 12-hour without minutes

        reset_hour=$(date -r "$end_sec" +"%l%p" 2>/dev/null | sed 's/^ *//' | tr '[:upper:]' '[:lower:]' || date -d "@$end_sec" +"%l%p" 2>/dev/null | sed 's/^ *//' | tr '[:upper:]' '[:lower:]')
        session_txt="$(printf '%dh %dm | resets %s ' "$rh" "$rm" "$reset_hour")"
        # session_txt="$(printf '%dh %dm until reset at %s (%d%%)' "$rh" "$rm" "$end_hm" "$session_pct")"
        # session_txt="$(printf '%dh %dm | resets at %s ' "$rh" "$rm" "$end_hm")"

        session_bar=$(progress_bar "$session_pct" 10)
      fi
    fi
  fi
fi

# ---- CC RAM usage ----
# utils_dir="$(pwd)/.claude/statuslines/utils"
# usage=$(bash "$utils_dir/getCCRAM.sh")
#!/usr/bin/env bash
# Sum RAM (MB) and %MEM for all Claude processes, including the parent Claude
# that launched this script. Stores formatted string in $usage.

name="${1:-claude}"

# 1) Collect PIDs by exact name
pids_name=$(pgrep -x "$name" 2>/dev/null || true)

# 2) Collect PIDs by exact full command (handles /path/to/claude)
#    -f: match full cmdline, -x: exact match of the pattern
# Pattern matches ".../claude" optionally followed by args.
pids_path=$(pgrep -fx ".*/${name}([[:space:]].*)?$" 2>/dev/null || true)

# 3) Include our parent if its command looks like claude
ppid=$(ps -o ppid= -p "$$" 2>/dev/null | tr -d ' ' || true)
ppid_match=""
if [ -n "$ppid" ]; then
  # Try full command; fall back to comm (executable name)
  pcmd=$(ps -o command= -p "$ppid" 2>/dev/null || ps -o comm= -p "$ppid" 2>/dev/null || true)
  if printf '%s' "$pcmd" | grep -Eq "(^|/|[[:space:]])${name}([[:space:]]|$)"; then
    ppid_match="$ppid"
  fi
fi

# 4) Merge & de-duplicate
pids=$(printf '%s\n%s\n%s\n' "$pids_name" "$pids_path" "$ppid_match" | awk 'NF{seen[$1]++} END{for (p in seen) print p}')

if [ -z "$pids" ]; then
  usage="RAM: 0.0MB (0 | 0.0%)"
else
  pidlist=$(echo "$pids" | paste -sd, -)
  # Count processes and sum %MEM and RSS (KB); handle race where processes exit before ps runs
  num_procs=$(echo "$pids" | wc -l | tr -d ' ')
  usage=$(LC_ALL=C ps -o %mem=,rss= -p "$pidlist" 2>/dev/null | \
    awk -v count="$num_procs" 'NF{mem+=$1; rss+=$2; found++}
         END{
           if (found==0) {printf "RAM: 0.0MB (0 | 0.0%%)"}
           else          {printf "RAM: %.1fMB (%d | %.1f%%)", rss/1024, found, mem}
         }')
fi

# ---- render statusline ----
# Line 1: Core info (directory, git, model, claude code version, output style)
printf '%s%s%s' "$(dir_color)" "$current_dir" "$(rst)"
if [ -n "$git_branch" ]; then
  printf ' %s‚ú¶ %s%s%s' "$(cc_version_color)" "$(git_color)" "$git_branch" "$(rst)"
fi
printf ' %s‚ú¶ %s%s%s' "$(cc_version_color)" "$(model_color)" "$model_name" "$(rst)"
if [ -n "$model_version" ] && [ "$model_version" != "null" ]; then
  printf '  üè∑Ô∏è %s%s%s' "$(version_color)" "$model_version" "$(rst)"
fi
if [ -n "$output_style" ] && [ "$output_style" != "null" ]; then
  printf ' %s‚ú¶ %s%s%s' "$(cc_version_color)" "$(version_color)" "$output_style" "$(rst)"
fi

# Line 2: Context and session time
line2=""
if [ -n "$session_txt" ]; then
  line2=" $(session_color)‚Üª ${session_txt}$(rst)$(session_color)${session_bar}$(rst) $(cc_version_color)‚ú¶ $(pink_color)${usage}$(rst)"
else
  # Always show RAM stats even without active session
  line2=" $(session_color)‚Üª No ongoing session$(rst) $(cc_version_color)‚ú¶ $(pink_color)${usage}$(rst)"
fi
if [ -n "$cc_version" ] && [ "$cc_version" != "null" ]; then
  line2="${line2} $(cc_version_color)‚ú¶ $(style_color)v${cc_version}$(rst)"
fi

# Line 3: Cost and usage analytics
line3=""

# Print lines
if [ -n "$line2" ]; then
  printf '\n%s' "$line2"
fi
if [ -n "$line3" ]; then
  printf '\n%s' "$line3"
fi
printf '\n'
